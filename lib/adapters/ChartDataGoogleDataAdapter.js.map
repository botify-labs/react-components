{"version":3,"sources":["adapters/ChartDataGoogleDataAdapter.js"],"names":[],"mappings":"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","file":"adapters/ChartDataGoogleDataAdapter.js","sourcesContent":["\nimport {List, Map, OrderedMap} from 'immutable';\n\n/**\n * @property {Map} _axes Map of axes relative dimension key\n * @param {[type]} chartData [description]\n */\nclass ChartDataGoogleDataAdapter{\n  constructor(chartData){\n    this.chartData = chartData;\n    this._axesKey = Map();\n    return this;\n  }\n\n  /**\n   * @param  {Map} options\n   * {\n   *   axes: Map<AxisName, DimensionsKey>  AxisName â‚¬ ['categories, series']\n   *   filters: Map<DimensionsKey, GroupKey>\n   * }\n   * @note\n   *  - Data is sum on unviable dimensions unless filters options are provided\n   *  - If axes option is not provided, it uses the last two dimensions in the ChartData\n   */\n  toGoogleDataArray(options = Map()){\n    this._setAxes(options.get('axes'));\n    var valuesArray = this._getGoogleValuesArray(options.get('filters'));\n\n    var [categoriesLabels, seriesLabels] = this._getAxesLabels();\n\n    //Merge valuesArray and labels in the google shitty way\n    //                     series\n    //                S1 S2 S3 S4 S5 S6\n    //            C1  X  X  X  X  X  X\n    //            C2  X              X\n    // categories C3  X  ValuesArray X\n    //            C4  X              X\n    //            C5  X  X  X  X  X  X\n    var googleDataArray = List();\n    googleDataArray = googleDataArray.push(seriesLabels.unshift(''));\n    categoriesLabels.forEach((label, i) => {\n      googleDataArray = googleDataArray.push(valuesArray.get(i).unshift(label));\n    });\n\n    return google.visualization.arrayToDataTable(googleDataArray.toJS());\n  }\n\n  toGoogleOptions(percentage){\n    /*var googleOptions = this.chartData.options.merge(Map(  //DEFAULT OPTIONS TO BE PUT IN CHART COMPONENT\n      {\n        series: {},\n        vAxis: {\n            format: percentage ? '#,###.#%' : '#,###.#',\n        },\n        hAxis: {\n            format: percentage ? '#,###.#%' : '#,###.#',\n        },\n        tooltip: {\n            trigger: \"none\"\n        }\n      }\n    ));*/\n    var googleOptions = Map();\n\n    googleOptions.set('series', this._getSeries().get('groups').map((group, key) => {\n      return Map({color: group.get('color')});\n    }).toList());\n\n    return googleOptions;\n  }\n\n  /**\n   * Converts Google Chart selection to DataKeys\n   * @param  {Object}   {row, column}\n   * @return {DataKeys}\n   */\n  selectionToDataKeys({row, column}){\n    var filter = Map();\n\n    // Series are indexed starting from 1, while categories are indexed starting from 0\n    var series = this._getSeries();\n    var serieKey = series.get('groups').keySeq().get(column - 1);\n    filter = filter.set(series.get('key'), serieKey);\n    if (row !== null) {\n      var categories = this._getCategories();\n      var categoryKey = categories.get('groups').keySeq().get(row);\n      filter = filter.set(categories.get('key'), categoryKey);\n    }\n\n    return filter;\n  }\n\n  _getCategories(){\n    return this._getAxis(this._axesKey.get('categories'));\n  }\n  _getSeries(){\n    return this._getAxis(this._axesKey.get('series'));\n  }\n\n  _getGoogleValuesArray(filters){\n    var googleValuesArray = this._getEmptyGoogleValuesArray(),\n        data = this.chartData.filterData(filters),\n        categories = this._getCategories(),\n        series = this._getSeries();\n\n    //Iterate on each data and set it's value in the proper cell\n    data.map((value, key) => {\n      var xIndex = categories.get('groupKeys').indexOf(key.get(categories.get('key')));\n      var yIndex = series.get('groupKeys').indexOf(key.get(series.get('key')));\n      if(xIndex === -1 || yIndex === -1){\n        throw new Error('data [' + key + ',' + value + '] have a dimension group\\'s key undefined');\n      }\n\n      googleValuesArray = googleValuesArray.setIn(\n        [xIndex, yIndex],\n        value.get(0) + googleValuesArray.getIn([xIndex, yIndex])  //Add to existing value\n      );\n    });\n    return googleValuesArray;\n  }\n\n  _getEmptyGoogleValuesArray(){\n    var googleValuesArray = List();\n    for(var x=0; x < this._getCategories().get('groupKeys').size; x++){\n      googleValuesArray = googleValuesArray.push(new List());\n      for(var y=0; y < this._getSeries().get('groupKeys').size; y++){\n        googleValuesArray = googleValuesArray.setIn([x, y], 0);\n      }\n    }\n    return googleValuesArray;\n  }\n\n  /**\n   * categories axis is the last dimension unless a specific option have been set\n   * series axis is the last-1 dimension unless a specific option have been set\n   */\n  _setAxes(axisKeys = Map()){\n    this._axesKey = this._axesKey.set('categories',\n      axisKeys.get('categories') || this.chartData.getDimensionKeyByIndex(0, true)\n    );\n\n    this._axesKey = this._axesKey.set('series',\n      axisKeys.get('series') || this.chartData.getDimensionKeyByIndex(1, true)\n    );\n  }\n\n  /**\n   * Return ChartData relative dimension and precomute helpers\n   * @return {Dimension}\n   */\n  _getAxis(axisKey){\n    var dimension = this.chartData.getDimension(axisKey);\n    return dimension\n      .set('key', axisKey)\n      .set('groupKeys', dimension.get('groups').keySeq());\n  }\n\n\n  /*_getAxisInfo(dimensionKey){\n    var info = Map();\n    info = info.set('key', dimensionKey);\n    info = info.set('value', this.chartData.getDimension(dimensionKey));\n    info = info.set('groupKeys', info.get('value').get('groups').keySeq());\n    return info;\n  }*/\n  _getAxesLabels(){\n    return [\n      this._getCategories().get('groups').map((group, key) => group.get('label') || key).toList(),\n      this._getSeries().get('groups').map((group, key) => group.get('label') || key).toList()\n    ];\n  }\n}\n\nexport default ChartDataGoogleDataAdapter;"],"sourceRoot":"/source/"}