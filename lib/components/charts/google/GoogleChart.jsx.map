{"version":3,"sources":["components/charts/google/GoogleChart.jsx"],"names":[],"mappings":"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","file":"components/charts/google/GoogleChart.jsx","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\n\nimport ChartData from '../../../models/ChartData';\nimport ChartDataGoogleDataAdapter from '../../../adapters/ChartDataGoogleDataAdapter';\n\n/**\n * Wrapper around a generic Google Chart\n * TODO: Maybe use a mixin instead?\n * Something like ChartMixin({\n *   chart: google.visualization.PieChart\n * })\n */\nvar GoogleChart = React.createClass({\n\n  displayName: 'GoogleChart',\n\n  propTypes: {\n    // Called when chart data is selected\n    onChartSelect: React.PropTypes.func,\n    // Called when chart data is hovered\n    onChartMouseOver: React.PropTypes.func,\n    // Called when chart data is not hovered anymore\n    onChartMouseOut: React.PropTypes.func,\n    // Subclass of google.visualization.CoreChart\n    googleChart: React.PropTypes.func,\n    // Chart data\n    chartData: React.PropTypes.instanceOf(ChartData),\n    // Chart options\n    // TODO: define structure\n    options: React.PropTypes.object,\n  },\n\n  /**\n   * Returns underlying chart's image URI representation\n   * @return {String}\n   */\n  getImageURI() {\n    return this.chart.getImageURI();\n  },\n\n  componentDidMount() {\n    this._initializeChart();\n\n    // Redraw the chart whenever the window is resized\n    window.addEventListener('resize', this._drawChart);\n  },\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._drawChart);\n  },\n\n  shouldComponentUpdate(nextProps, nextState) {\n    // TODO: use immutable!\n    return !(nextProps.chartData === this.props.chartData);\n  },\n\n  componentDidUpdate(prevProps, prevState) {\n    this._drawChart();\n  },\n\n  render() {\n    return (\n      <div {..._.omit(this.props, 'children', 'options', 'chartData', 'chart', 'onChartMouseOut', 'onChartMouseOver')} />\n    );\n  },\n\n  /**\n   * Instanciates the Google Chart from the chart constructor prop.\n   * This should only be called once.\n   */\n  _initializeChart() {\n    this.adapter = new ChartDataGoogleDataAdapter(this.props.chartData);\n\n    this.chart = new this.props.googleChart(this.getDOMNode());\n\n    this._bindChartEvents();\n    this._drawChart();\n  },\n\n  /**\n   * Binds event handlers to chart events\n   */\n  _bindChartEvents() {\n    google.visualization.events.addListener(this.chart, 'onmousemove', this._handleChartMouseMove);\n    google.visualization.events.addListener(this.chart, 'select', this._handleChartSelect);\n    google.visualization.events.addListener(this.chart, 'onmouseover', this._handleChartMouseOver);\n    google.visualization.events.addListener(this.chart, 'onmouseout', this._handleChartMouseOut);\n  },\n\n  /**\n   * Called when the mouse moves over the chart\n   * Keeps track of what element the mouse is currently hovering\n   */\n  _handleChartMouseMove(e) {\n    this._prevTargetID = this._targetID;\n    this._targetID = e.targetID;\n  },\n\n  /**\n   * Called when a chart data point or category is selected\n   */\n  _handleChartSelect(e) {\n    if (!this.props.onChartSelect) {\n      return;\n    }\n\n    var filter = this.adapter.selectionToDataKeys(e);\n    var data = this.props.chartData.filterData(filter);\n\n    this.props.onChartSelect(data);\n  },\n\n  /**\n   * Called when the mouse enters a chart data point\n   */\n  _handleChartMouseOver(e) {\n    if (!this.props.onChartMouseOver || this._targetID.indexOf('legendentry') === 0) {\n      // Don't execute mouseOver when the hovered element is the legend\n      return;\n    }\n\n    var filter = this.adapter.selectionToDataKeys(e);\n    var data = this.props.chartData.filterData(filter);\n\n    this.props.onChartMouseOver(data);\n  },\n\n  /**\n   * Called when the mouse leaves a chart data point\n   */\n  _handleChartMouseOut() {\n    if (!this.props.onChartMouseOut || this._prevTargetID.indexOf('legendentry') === 0) {\n      // Don't execute mouseOut when the previously hovered element is the legend\n      return;\n    }\n\n    this.props.onChartMouseOut();\n  },\n\n  /**\n   * Returns the google chart options\n   */\n  _getOptions() {\n    return _.assign({}, this.props.options, {\n      tooltip: {\n        trigger: 'none'\n      }\n    });\n  },\n\n  /**\n   * Redraws the chart with data and options props.\n   */\n  _drawChart() {\n    this.chart.draw(this.adapter.toGoogleDataArray(), this._getOptions());\n  },\n\n});\n\nexport default GoogleChart;\n"],"sourceRoot":"/source/"}