{"version":3,"sources":["components/venn-diagram/VennCanvas.jsx"],"names":[],"mappings":"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","file":"components/venn-diagram/VennCanvas.jsx","sourcesContent":["import React from 'react';\nimport venn from 'venn.js';\nimport Immutable from 'immutable';\n\nimport Circle, {\n  CircleDifference, CircleIntersection,\n  CircleDifferenceInterior, CircleIntersectionInterior\n} from '../svg/Circle';\n\nconst VennCanvas = React.createClass({\n\n  displayName: 'VennCanvas',\n\n  propTypes: {\n    activeSet: React.PropTypes.instanceOf(Immutable.Map)\n  },\n\n  getInitialState() {\n    return {\n      width: 1000,\n      height: 1000\n    };\n  },\n\n  componentDidMount() {\n    this._scale();\n\n    // Re-scale the canvas whenever the window resizes\n    window.addEventListener('resize', this._scale);\n  },\n\n  componentDidUpdate() {\n    this._scale();\n  },\n\n  /**\n   * Recalculate the venn diagram so that it fits into the canvas\n   */\n  _scale() {\n    let {width, height} = React.findDOMNode(this).getBoundingClientRect();\n\n    if (width !== this.state.width || height !== this.state.height) {\n      this.setState({width, height});\n    }\n  },\n\n  render() {\n    let {vennData, onClick, onMouseOver, onMouseOut} = this.props;\n    let {width, height} = this.state;\n    let padding = 30;\n\n    let vennSets = vennData.getSets();\n    let vennIntersections = vennData.getIntersections();\n\n    // Transform our data into a structure venn.js understands\n    let sets = vennSets\n      .map((set, idx) => {\n        return {\n          sets: [idx],\n          size: set.get('size')\n        };\n      })\n      .toJS();\n    let intersections = vennIntersections\n      .map(([sets, intersection]) => {\n        return {\n          sets: sets.map((set) => vennSets.indexOf(set)).toJS(),\n          size: intersection.get('size')\n        };\n      })\n      .toJS();\n\n    let circles = venn.venn(sets.concat(intersections));\n    circles = venn.scaleSolution(circles, width, height, padding);\n\n    // Create circle intersections and circle differences to represent our sets and set intersections.\n    // Since sets and set intersections are extremely similar, they share a lot of code.\n    // TODO: this part doesn't support cases where we have more than two sets or/and the diagram is inclusive\n    // In order to support those cases display-wise we'd probably need to switch to a vector library more\n    // powerful than standard SVG 1.1. Vector boolean operations are really hard to do in SVG 1.1, whereas\n    // PaperJS has them built in.\n    let setElements = vennSets.map((set, idx) => {\n      return {\n        set: set,\n        c1: circles[idx],\n        c2: circles[1 - idx],\n        class: CircleDifference\n      };\n    });\n    let interElements = vennIntersections.map(([sets, intersection]) => {\n      return {\n        set: intersection,\n        c1: circles[vennSets.indexOf(sets.first())],\n        c2: circles[vennSets.indexOf(sets.last())],\n        class: CircleIntersection\n      };\n    });\n    let elements = setElements.concat(interElements).map((el, idx) => {\n      return (\n        <el.class\n          key={idx}\n          style={onClick && {cursor: 'pointer'}}\n          onClick={onClick && onClick.bind(null, el.set, idx)}\n          onMouseOver={onMouseOver && onMouseOver.bind(null, el.set)}\n          onMouseOut={onMouseOut && onMouseOut.bind(null, el.set)}\n          c1={el.c1}\n          c2={el.c2}\n          fill={el.set.get('color')}\n          opacity={el.set === this.props.activeSet ? 1 : 0.8}\n        />\n      );\n    }).toJS();\n\n    return (\n      <svg className=\"VennCanvas\">\n        {elements}\n      </svg>\n    );\n  }\n\n});\n\nexport default VennCanvas;\n"],"sourceRoot":"/source/"}