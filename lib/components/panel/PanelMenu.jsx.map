{"version":3,"sources":["components/panel/PanelMenu.jsx"],"names":[],"mappings":"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","file":"components/panel/PanelMenu.jsx","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport {DropdownButton, MenuItem} from 'react-bootstrap';\n\nvar PanelMenu = React.createClass({\n\n  displayName: 'PanelMenu',\n\n  propTypes: {\n    className: React.PropTypes.string,\n\n    // Called when a display mode is selected\n    onDisplayMode: React.PropTypes.func,\n\n    // Called when an action is selected\n    onAction: React.PropTypes.func,\n\n    // Id of the current displayMode\n    currentDisplayModeId: React.PropTypes.string,\n\n    // Array of all available display modes\n    // displayModes are retrieved from the getDisplayModes static method on Panel children\n    displayModes: React.PropTypes.arrayOf(React.PropTypes.shape({\n      id: React.PropTypes.string,\n      icon: React.PropTypes.string,\n      label: React.PropTypes.string,\n    })),\n\n    // Array of all available actions\n    // actions are retrieved from the getAction static method on Panel children\n    actions: React.PropTypes.arrayOf(React.PropTypes.shape({\n      id: React.PropTypes.string,\n      icon: React.PropTypes.string,\n      label: React.PropTypes.string,\n      // Name of the method to call on the mounted component this action targets\n      methodName: React.PropTypes.string,\n    })),\n  },\n\n  /**\n   * Called when a display mode is selected\n   * @param  {Object} displayMode\n   */\n  _handleDisplayModeSelect(displayMode) {\n    if (this.props.onDisplayMode) {\n      this.props.onDisplayMode(displayMode);\n    }\n  },\n\n  /**\n   * Called when an action is selected\n   * @param  {Object} action\n   */\n  _handleActionSelect(action) {\n    if (typeof this.props.onAction === 'function') {\n      this.props.onAction(action);\n    }\n  },\n\n  render() {\n    var displayModes = this.props.displayModes.map((displayMode) => {\n      return (\n        <MenuItem key={displayMode.id}\n                  className={displayMode.id === this.props.currentDisplayModeId && 'text-muted'}\n                  onSelect={this._handleDisplayModeSelect.bind(null, displayMode)}>\n          <i className={`fa ${displayMode.icon}`}/>\n          {displayMode.label}\n        </MenuItem>\n      );\n    });\n\n    var actions = this.props.actions.map((action) => {\n      return (\n        <MenuItem key={action.id}\n                  onSelect={this._handleActionSelect.bind(null, action)}>\n          <i className={`fa ${action.icon}`}></i>\n          {action.label}\n        </MenuItem>\n      );\n    });\n\n    return (\n      <DropdownButton noCaret\n                      pullRight\n                      className={classNames(this.props.className, 'PanelMenu')}\n                      title={<i className=\"fa fa-gear\"/>}>\n        {displayModes}\n        {displayModes.length > 0 && actions.length > 0 ? <MenuItem divider/> : null}\n        {actions}\n      </DropdownButton>\n    );\n  }\n\n});\n\nexport default PanelMenu;\n"],"sourceRoot":"/source/"}