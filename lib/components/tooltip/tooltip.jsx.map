{"version":3,"sources":["components/tooltip/Tooltip.jsx"],"names":[],"mappings":";;;;IAAO,KAAK,2BAAM,cAAc;;IACxB,GAAG,WAAO,WAAW,EAArB,GAAG;;QAEJ,gBAAgB;;AAEvB,IAAI,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC;;AAE9B,aAAW,EAAE,SAAS;;AAEtB,WAAS,EAAE;AACT,YAAQ,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC;AAC9B,SAAG,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU;AACtC,UAAI,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU;KACxC,CAAC;GACH;;AAED,iBAAe,EAAA,2BAAG;AAChB,WAAO;AACL,WAAK,EAAE,IAAI;AACX,YAAM,EAAE,IAAI,EACb,CAAC;GACH;;AAED,mBAAiB,EAAA,6BAAG;AAClB,QAAI,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;;AAE7B,QAAI,CAAC,QAAQ,CAAC;AACZ,WAAK,EAAE,IAAI,CAAC,WAAW;AACvB,YAAM,EAAE,IAAI,CAAC,YAAY,EAC1B,CAAC,CAAC;GACJ;;AAED,QAAM,EAAA,kBAAG;AACP,QAAI,KAAK,CAAC;iBACY,IAAI,CAAC,KAAK;QAA3B,KAAK,UAAL,KAAK;QAAE,MAAM,UAAN,MAAM;;AAClB,QAAI,KAAK,KAAK,IAAI,EAAE;AAClB,WAAK,GAAG,EAAC,QAAQ,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,IAAI,EAAC,CAAC;KACzD,MAAM;AACL,WAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;KAC1B;;AAED,WACE;;QAAK,SAAS,EAAC,SAAS,EAAC,KAAK,EAAE,KAAK,AAAC;MACnC,IAAI,CAAC,KAAK,CAAC,QAAQ;KAChB,CACN;GACH;;AAED,WAAS,EAAA,qBAAG;AACV,QAAI,KAAK,GAAG,EAAC,QAAQ,EAAE,UAAU,EAAC,CAAC;AACnC,QAAI,MAAM,GAAG,EAAE,CAAC;QACX,QAAQ,GAAI,IAAI,CAAC,KAAK,CAAtB,QAAQ;iBACS,IAAI,CAAC,KAAK;QAA3B,KAAK,UAAL,KAAK;QAAE,MAAM,UAAN,MAAM;;AAClB,QAAI,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC;;;;;;AAM/C,QAAI,QAAQ,CAAC,GAAG,GAAG,MAAM,GAAG,MAAM,GAAG,CAAC,EAAE;AACtC,WAAK,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,GAAG,MAAM,GAAG,MAAM,CAAC;KAC5C,MAAM;AACL,WAAK,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,GAAG,MAAM,CAAC;KACnC;;AAED,QAAI,QAAQ,CAAC,IAAI,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,IAAI,QAAQ,CAAC,IAAI,GAAG,KAAK,GAAG,CAAC,GAAG,cAAc,EAAE;AAC/E,WAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,KAAK,GAAG,CAAC,CAAC;KACxC,MAAM,IAAI,QAAQ,CAAC,IAAI,GAAG,KAAK,GAAG,MAAM,GAAG,CAAC,EAAE;AAC7C,WAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,KAAK,GAAG,MAAM,CAAC;KAC7C,MAAM;AACL,WAAK,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,GAAG,MAAM,CAAC;KACrC;;AAED,WAAO,KAAK,CAAC;GACd;;CAEF,CAAC,CAAC;;iBAEY,OAAO","file":"components/tooltip/Tooltip.jsx","sourcesContent":["import React from 'react/addons';\nimport {Map} from 'immutable';\n\nimport './Tooltip.scss';\n\nvar Tooltip = React.createClass({\n\n  displayName: 'Tooltip',\n\n  propTypes: {\n    position: React.PropTypes.shape({\n      top: React.PropTypes.number.isRequired,\n      left: React.PropTypes.number.isRequired\n    })\n  },\n\n  getInitialState() {\n    return {\n      width: null,\n      height: null,\n    };\n  },\n\n  componentDidMount() {\n    var node = this.getDOMNode();\n\n    this.setState({\n      width: node.offsetWidth,\n      height: node.offsetHeight,\n    });\n  },\n\n  render() {\n    var style;\n    var {width, height} = this.state;\n    if (width === null) {\n      style = {position: 'absolute', top: -9999, left: -9999};\n    } else {\n      style = this._getStyle();\n    }\n\n    return (\n      <div className=\"Tooltip\" style={style}>\n        {this.props.children}\n      </div>\n    );\n  },\n\n  _getStyle() {\n    var style = {position: 'absolute'};\n    var margin = 10; // x and y margin between the mouse and the tooltip\n    var {position} = this.props;\n    var {width, height} = this.state;\n    var containerWidth = document.body.offsetWidth;\n\n    // Calculate the best position for the tooltip so that\n    //  * it won't overlay its given focus position\n    //  * it won't cross its container's boundaries\n\n    if (position.top - height - margin > 0) {\n      style.top = position.top - height - margin;\n    } else {\n      style.top = position.top + margin;\n    }\n\n    if (position.left - width / 2 > 0 && position.left + width / 2 < containerWidth) {\n      style.left = position.left - width / 2;\n    } else if (position.left - width - margin > 0) {\n      style.left = position.left - width - margin;\n    } else {\n      style.left = position.left + margin;\n    }\n\n    return style;\n  }\n\n});\n\nexport default Tooltip;\n"],"sourceRoot":"/source/"}