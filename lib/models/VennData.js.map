{"version":3,"sources":["models/VennData.js"],"names":[],"mappings":"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","file":"models/VennData.js","sourcesContent":["import {OrderedSet, OrderedMap, Set, Map} from 'immutable';\n\nclass VennData {\n\n  constructor() {\n    this.sets = OrderedSet();\n    this.intersections = OrderedMap();\n  }\n\n  /**\n   * Adds a VennSet to the list of sets\n   * @param {VennSet} set\n   */\n  addSet(set) {\n    this._testSet(set);\n    this.sets = this.sets.add(set);\n  }\n\n  /**\n   * Adds a VennIntersection to the list of intersections\n   * @param {Set<VennSet>}      sets\n   * @param {VennIntersection}  intersection  Intersection of `sets`\n   */\n  addIntersection(sets, intersection) {\n    if (!Set.isSet(sets)) {\n      throw new TypeError('sets argument is not a Set');\n    }\n    sets.forEach((set) => {\n      if (!this.sets.contains(set)) {\n        throw new Error('set does not exist');\n      }\n    });\n    this._testSet(intersection);\n\n    this.intersections = this.intersections.set(sets, intersection);\n  }\n\n  /**\n   * Return the size of the given VennSet or VennIntersection\n   * @param  {VennSet|VennIntersection} set\n   * @param  {Boolean}                  inclusive\n   * @return {Number}\n   */\n  getSizeOf(set, inclusive = false) {\n    let size = set.get('size');\n\n    if (!inclusive) {\n      if (this.sets.contains(set)) {\n        this.intersections.forEach((intersection, sets) => {\n          if (sets.contains(set)) {\n            size -= this.getSizeOf(intersection, false);\n          }\n        });\n      } else if (this.intersections.contains(set)) {\n        let sets = this.intersections.findKey((other) => other === set);\n        this.intersections.forEach((otherIntersection, otherSets) => {\n          if (otherIntersection !== set && sets.isSubset(otherSets)) {\n            size -= this.getSizeOf(otherIntersection, false);\n          }\n        });\n      }\n    }\n\n    return size;\n  }\n\n  /**\n   * Return the list of sets as an ordered sequence\n   * @return {IndexedSeq<VennSet>}\n   */\n  getSets() {\n    return this.sets.valueSeq();\n  }\n\n  /**\n   * Return the list of intersections as an ordered sequence of [Set<VennSet>, VennIntersection] tuples\n   * @return {IndexedSeq<Array<Any>>}\n   */\n  getIntersections() {\n    return this.intersections.entrySeq();\n  }\n\n  /**\n   * Return the intersection of the given list of sets\n   * @param  {Array<VennSet>} sets\n   * @return {VennIntersection}\n   */\n  getIntersectionOf(...sets) {\n    return this.intersections.get(Set.of(...sets));\n  }\n\n  _testSet(set) {\n    if (!Map.isMap(set)) {\n      throw new TypeError('Set is not an Map');\n    }\n  }\n\n}\n\nexport default VennData;\n"],"sourceRoot":"/source/"}