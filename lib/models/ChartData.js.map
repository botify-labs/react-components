{"version":3,"sources":["models/ChartData.js"],"names":[],"mappings":"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","file":"models/ChartData.js","sourcesContent":["\nimport {List, Map, OrderedMap} from 'immutable';\n\n/**\n * @structure DataKeys\n * Map<Any,Any>  //<dimension key, group key>\n */\n\n/**\n * @structure DataValues\n * List<Any>\n */\n\n/**\n * @structure Dimension\n * Map({\n *   label: String,\n *   render: function(data),\n *   Any: Any\n *   groups: OrderMap<Any, DimensionGroup>\n * })\n */\n\n/**\n * @structure DimensionGroup\n * Map({\n *   label: String,\n *   color: String,\n *   Any: Any\n * })\n */\n\n/**\n * @property {Map<DataKeys, DataValues>}  data\n * @property {OrderMap<Any, Dimension>}   dimensions\n * @property {List<Metric>}               metrics\n */\nclass ChartData{\n\n  constructor(){\n    this.rawData = Map();\n    this.dimensions = OrderedMap();\n    this.metrics = List();\n  }\n\n  /**\n   * @param {DataKeys} keys\n   * @param {DataValues} values\n   */\n  setData(keys, values){\n    this._testDataKeys(keys);\n    this._testDataValues(values);\n\n    //Add data\n    this.rawData = this.rawData.set(keys, values);\n\n    //Add dimensions or/and groups if not exist\n    keys.forEach((groupKey, dimKey) => {\n      if(!this.hasDimensionGroup(dimKey, groupKey)){\n        this.addDimensionGroup(dimKey, groupKey);\n      }\n    });\n  }\n\n  _testDataKeys(keys){\n    if(!Map.isMap(keys)){\n      throw new TypeError(\"DataKeys is not an Map\");\n    }\n  }\n  _testDataValues(values){\n    if(!List.isList(values)){\n      throw new TypeError(\"DataValues is not a List\");\n    }\n  }\n\n  /**\n   * @param {DataKeys} keys\n   */\n  getData(keys){\n    return this.rawData.get(keys);\n  }\n\n  /**\n   * Filter RawData according to given filters\n   * @param  {DataKeys} filters\n   */\n  filterData(filters){\n    if(!filters){\n      return this.rawData;\n    }\n    return this.rawData.filter((value, key) => filters.isSubset(key));\n  }\n\n  /**\n   * @param {Map} metricMetadata\n   */\n  addMetric(metricMetadata = Map()){\n    this.metrics = this.metrics.push(metricMetadata);\n  }\n\n  /**\n   * @param   {Number} index\n   * @return  {Map}\n   */\n  getMetric(index){\n    return this.metrics.get(index);\n  }\n\n  /**\n   * @param   {Number} index\n   * @return  {Boolean}\n   */\n  hasMetric(index){\n    return this.metrics.has(index);\n  }\n\n  /**\n   * @param {Any} dimKey\n   * @param {Map<String,Any>} dimMetadata {label: <String>, color: <String>, ...}\n   */\n  addDimension(dimKey, dimMetadata = Map()){\n    var dimensionValue = dimMetadata.set('groups', OrderedMap());\n\n    this.dimensions = this.dimensions.set(dimKey, dimensionValue);\n  }\n\n  getDimensionKeyByIndex(index, fromEnd){\n    var start = !fromEnd ? index : -(index+1),\n        end = start+1 !== 0 ? start+1 : undefined;\n    return this.dimensions.keySeq().get(index);\n  }\n\n  /**\n   * @param {Any} dimKey\n   */\n  getDimension(dimKey){\n    return this.dimensions.get(dimKey);\n  }\n  /**\n   * @param {Any} dimKey\n   */\n  hasDimension(dimKey){\n    return this.dimensions.has(dimKey);\n  }\n\n  /**\n   * @param {Any} dimKey\n   * @param {Any} groupKey\n   * @param {Map<String,Any>} groupMetadata {label: <String>, color: <String>, ...}\n   */\n  addDimensionGroup(dimKey, groupKey, groupMetadata = Map()){\n    //Add dimension if not exist\n    if(!this.hasDimension(dimKey)){\n      throw new Error(\"you can't add group to an unexisting group\");\n    }\n\n    this.dimensions = this.dimensions.setIn([dimKey, 'groups', groupKey], groupMetadata);\n  }\n  /**\n   * @param {Any} dimKey\n   * @param {Any} groupKey\n   */\n  getDimensionGroup(dimKey, groupKey){\n    return this.dimensions.getIn([dimKey, 'groups', groupKey]);\n  }\n  /**\n   * @param {Any} dimKey\n   * @param {Any} groupKey\n   */\n  hasDimensionGroup(dimKey, groupKey){\n    return this.dimensions.hasIn([dimKey, 'groups', groupKey]);\n  }\n}\n\nexport default ChartData;"],"sourceRoot":"/source/"}